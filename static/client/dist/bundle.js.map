{"version":3,"sources":["webpack:///bundle.js","webpack:///./src/App.tsx","webpack:///./src/ToggleSwitch.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonp","124","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","RX","ToggleSwitch_1","styles","container","Styles","createViewStyle","flex","justifyContent","alignItems","backgroundColor","helloWorld","createTextStyle","fontSize","fontWeight","marginBottom","color","welcome","instructions","docLink","createLinkStyle","toggleTitle","App","_super","_this","call","_onChangeToggle","newValue","setState","toggleValue","_translationValue","Animated","Value","_animatedStyle","createAnimatedTextStyle","transform","translateY","state","componentDidMount","timing","toValue","easing","Easing","OutBack","duration","start","render","createElement","View","style","Text","Link","url","default","value","onChange","Component","125","defineProperty","_knobLeftOff","_knobLeftOn","_styles","createButtonStyle","flexDirection","toggleSwitch","borderRadius","marginVertical","height","width","toggleSwitchBackground","position","top","bottom","left","right","toggleKnob","ToggleSwitch","props","_handleClick","e","stopPropagation","_knobLeftAnimationValue","_knobLeftAnimationStyle","createAnimatedViewStyle","_toggleColorAnimationValue","_toggleColorAnimationStyle","createAnimatedTextInputStyle","interpolate","inputRange","outputRange","componentWillUpdate","newProps","parallel","InOut","knobStyles","backgroundStyle","Button","onPress","126","initialize","UserInterface","setMainView"],"mappings":"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","file":"bundle.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 124:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/*\r\n* This file demonstrates a basic ReactXP app.\r\n*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar RX = __webpack_require__(42);\r\nvar ToggleSwitch_1 = __webpack_require__(125);\r\nvar styles = {\r\n    container: RX.Styles.createViewStyle({\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#f5fcff'\r\n    }),\r\n    helloWorld: RX.Styles.createTextStyle({\r\n        fontSize: 48,\r\n        fontWeight: 'bold',\r\n        marginBottom: 28,\r\n        color: '#FF3333'\r\n    }),\r\n    welcome: RX.Styles.createTextStyle({\r\n        fontSize: 32,\r\n        marginBottom: 12\r\n    }),\r\n    instructions: RX.Styles.createTextStyle({\r\n        fontSize: 16,\r\n        color: '#aaa',\r\n        marginBottom: 40\r\n    }),\r\n    docLink: RX.Styles.createLinkStyle({\r\n        fontSize: 16,\r\n        color: 'blue',\r\n        marginBottom: 40\r\n    }),\r\n    toggleTitle: RX.Styles.createTextStyle({\r\n        fontSize: 16,\r\n        color: 'black'\r\n    })\r\n};\r\nvar App = (function (_super) {\r\n    __extends(App, _super);\r\n    function App() {\r\n        var _this = _super.call(this) || this;\r\n        // Note that we define this as a variable rather than a normal method. Using this\r\n        // method, we prebind the method to this component instance. This prebinding ensures\r\n        // that each time we pass the variable as a prop in the render function, it will\r\n        // not change. We want to avoid unnecessary prop changes because this will trigger\r\n        // extra work within React's virtual DOM diffing mechanism.\r\n        _this._onChangeToggle = function (newValue) {\r\n            _this.setState({ toggleValue: newValue });\r\n        };\r\n        _this._translationValue = new RX.Animated.Value(-100);\r\n        _this._animatedStyle = RX.Styles.createAnimatedTextStyle({\r\n            transform: [\r\n                {\r\n                    translateY: _this._translationValue\r\n                }\r\n            ]\r\n        });\r\n        _this.state = {\r\n            toggleValue: true\r\n        };\r\n        return _this;\r\n    }\r\n    App.prototype.componentDidMount = function () {\r\n        var animation = RX.Animated.timing(this._translationValue, {\r\n            toValue: 0,\r\n            easing: RX.Animated.Easing.OutBack(),\r\n            duration: 500\r\n        });\r\n        animation.start();\r\n    };\r\n    App.prototype.render = function () {\r\n        return (RX.createElement(RX.View, { style: styles.container },\r\n            RX.createElement(RX.Animated.Text, { style: [styles.helloWorld, this._animatedStyle] }, \"Nice! Test 5\"),\r\n            RX.createElement(RX.Text, { style: styles.welcome }, \"Welcome to ReactXP\"),\r\n            RX.createElement(RX.Text, { style: styles.instructions }, \"Edit App.tsx to get started\"),\r\n            RX.createElement(RX.Link, { style: styles.docLink, url: 'https://microsoft.github.io/reactxp/docs' }, \"View ReactXP documentation\"),\r\n            RX.createElement(RX.Text, { style: styles.toggleTitle }, \"Here is a simple control built using ReactXP\"),\r\n            RX.createElement(ToggleSwitch_1.default, { value: this.state.toggleValue, onChange: this._onChangeToggle })));\r\n    };\r\n    return App;\r\n}(RX.Component));\r\nmodule.exports = App;\r\n\n\n/***/ }),\n\n/***/ 125:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* ToggleSwitch.tsx\r\n* Copyright: Microsoft 2017\r\n*\r\n* A simple toggle control built in ReactXP that allows users to\r\n* pick between two values.\r\n*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RX = __webpack_require__(42);\r\nvar _knobLeftOff = 2; // In pixels\r\nvar _knobLeftOn = 22; // In pixels\r\nvar _animationDuration = 250; // In milliseconds\r\nvar _styles = {\r\n    container: RX.Styles.createButtonStyle({\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    }),\r\n    toggleSwitch: RX.Styles.createViewStyle({\r\n        flexDirection: 'row',\r\n        borderRadius: 15,\r\n        marginVertical: 8,\r\n        height: 30,\r\n        width: 50,\r\n        backgroundColor: '#ddd'\r\n    }),\r\n    toggleSwitchBackground: RX.Styles.createViewStyle({\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        borderRadius: 15\r\n    }),\r\n    toggleKnob: RX.Styles.createViewStyle({\r\n        top: 2,\r\n        height: 26,\r\n        width: 26,\r\n        borderRadius: 13,\r\n        backgroundColor: 'white'\r\n    })\r\n};\r\nvar ToggleSwitch = (function (_super) {\r\n    __extends(ToggleSwitch, _super);\r\n    function ToggleSwitch(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this._handleClick = function (e) {\r\n            e.stopPropagation();\r\n            if (_this.props.onChange) {\r\n                _this.props.onChange(!_this.props.value);\r\n            }\r\n        };\r\n        // This value controls the left offset of the knob, which we will\r\n        // animate when the user toggles the control.\r\n        _this._knobLeftAnimationValue = new RX.Animated.Value(_this.props.value ? _knobLeftOn : _knobLeftOff);\r\n        _this._knobLeftAnimationStyle = RX.Styles.createAnimatedViewStyle({\r\n            left: _this._knobLeftAnimationValue\r\n        });\r\n        // This value controls the background color of the control. Here we make\r\n        // use of the interpolate method to smoothly transition between two colors.\r\n        _this._toggleColorAnimationValue = new RX.Animated.Value(_this.props.value ? 1 : 0);\r\n        _this._toggleColorAnimationStyle = RX.Styles.createAnimatedTextInputStyle({\r\n            backgroundColor: _this._toggleColorAnimationValue.interpolate({\r\n                inputRange: [0, 1],\r\n                outputRange: ['#66f', '#ddd']\r\n            })\r\n        });\r\n        return _this;\r\n    }\r\n    ToggleSwitch.prototype.componentWillUpdate = function (newProps) {\r\n        // If the value of the toggle changes, animate the toggle sliding\r\n        // from one side to the other. In parallel, animate the opacity change.\r\n        if (this.props.value !== newProps.value) {\r\n            RX.Animated.parallel([\r\n                RX.Animated.timing(this._knobLeftAnimationValue, {\r\n                    toValue: newProps.value ? _knobLeftOn : _knobLeftOff,\r\n                    duration: _animationDuration,\r\n                    easing: RX.Animated.Easing.InOut()\r\n                }),\r\n                RX.Animated.timing(this._toggleColorAnimationValue, {\r\n                    toValue: newProps.value ? 1 : 0,\r\n                    duration: _animationDuration,\r\n                    easing: RX.Animated.Easing.InOut()\r\n                })\r\n            ])\r\n                .start();\r\n        }\r\n    };\r\n    ToggleSwitch.prototype.render = function () {\r\n        var knobStyles = [_styles.toggleKnob, this._knobLeftAnimationStyle];\r\n        var backgroundStyle = [_styles.toggleSwitchBackground, this._toggleColorAnimationStyle];\r\n        return (RX.createElement(RX.Button, { style: _styles.container, onPress: this._handleClick },\r\n            RX.createElement(RX.View, { style: _styles.toggleSwitch },\r\n                RX.createElement(RX.Animated.View, { style: backgroundStyle }),\r\n                RX.createElement(RX.Animated.View, { style: knobStyles }))));\r\n    };\r\n    return ToggleSwitch;\r\n}(RX.Component));\r\nexports.default = ToggleSwitch;\r\n\n\n/***/ }),\n\n/***/ 126:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RX = __webpack_require__(42);\r\nvar App = __webpack_require__(124);\r\nRX.App.initialize(true, true);\r\nRX.UserInterface.setMainView(RX.createElement(App, null));\r\n\n\n/***/ })\n\n},[126]);\n\n\n// WEBPACK FOOTER //\n// bundle.js","/*\r\n* This file demonstrates a basic ReactXP app.\r\n*/\r\n\r\nimport RX = require('reactxp');\r\n\r\nimport ToggleSwitch from './ToggleSwitch';\r\n\r\ninterface AppState {\r\n    toggleValue?: boolean;\r\n}\r\n\r\nconst styles = {\r\n    container: RX.Styles.createViewStyle({\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#f5fcff'\r\n    }),\r\n    helloWorld: RX.Styles.createTextStyle({\r\n        fontSize: 48,\r\n        fontWeight: 'bold',\r\n        marginBottom: 28,\r\n        color: '#FF3333'\r\n    }),\r\n    welcome: RX.Styles.createTextStyle({\r\n        fontSize: 32,\r\n        marginBottom: 12\r\n    }),\r\n    instructions: RX.Styles.createTextStyle({\r\n        fontSize: 16,\r\n        color: '#aaa',\r\n        marginBottom: 40\r\n    }),\r\n    docLink: RX.Styles.createLinkStyle({\r\n        fontSize: 16,\r\n        color: 'blue',\r\n        marginBottom: 40\r\n    }),\r\n    toggleTitle: RX.Styles.createTextStyle({\r\n        fontSize: 16,\r\n        color: 'black'\r\n    })\r\n};\r\n\r\nclass App extends RX.Component<{}, AppState> {\r\n    private _translationValue: RX.Animated.Value;\r\n    private _animatedStyle: RX.Types.AnimatedTextStyleRuleSet;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._translationValue = new RX.Animated.Value(-100);\r\n        this._animatedStyle = RX.Styles.createAnimatedTextStyle({\r\n            transform: [\r\n                {\r\n                    translateY: this._translationValue\r\n                }\r\n            ]\r\n        });\r\n\r\n        this.state = {\r\n            toggleValue: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let animation = RX.Animated.timing(this._translationValue, {\r\n            toValue: 0,\r\n            easing: RX.Animated.Easing.OutBack(),\r\n            duration: 500\r\n        }\r\n        );\r\n\r\n        animation.start();\r\n    }\r\n\r\n    render(): JSX.Element | null {\r\n        return (\r\n            <RX.View style={styles.container}>\r\n                <RX.Animated.Text style={[styles.helloWorld, this._animatedStyle]}>\r\n                    Nice! Test 5\r\n                </RX.Animated.Text>\r\n                <RX.Text style={styles.welcome}>\r\n                    Welcome to ReactXP\r\n                </RX.Text>\r\n                <RX.Text style={styles.instructions}>\r\n                    Edit App.tsx to get started\r\n                </RX.Text>\r\n                <RX.Link style={styles.docLink} url={'https://microsoft.github.io/reactxp/docs'}>\r\n                    View ReactXP documentation\r\n                </RX.Link>\r\n\r\n                <RX.Text style={styles.toggleTitle}>\r\n                    Here is a simple control built using ReactXP\r\n                </RX.Text>\r\n                <ToggleSwitch\r\n                    value={this.state.toggleValue}\r\n                    onChange={this._onChangeToggle}\r\n                />\r\n            </RX.View>\r\n        );\r\n    }\r\n\r\n    // Note that we define this as a variable rather than a normal method. Using this\r\n    // method, we prebind the method to this component instance. This prebinding ensures\r\n    // that each time we pass the variable as a prop in the render function, it will\r\n    // not change. We want to avoid unnecessary prop changes because this will trigger\r\n    // extra work within React's virtual DOM diffing mechanism.\r\n    private _onChangeToggle = (newValue: boolean) => {\r\n        this.setState({ toggleValue: newValue });\r\n    }\r\n}\r\n\r\nexport = App;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/App.tsx","/**\r\n* ToggleSwitch.tsx\r\n* Copyright: Microsoft 2017\r\n*\r\n* A simple toggle control built in ReactXP that allows users to\r\n* pick between two values.\r\n*/\r\n\r\nimport RX = require('reactxp');\r\n\r\nexport interface ToggleSwitchProps extends RX.CommonProps {\r\n    value?: boolean;\r\n    onChange?: (newValue: boolean) => void;\r\n}\r\n\r\nconst _knobLeftOff = 2; // In pixels\r\nconst _knobLeftOn = 22; // In pixels\r\nconst _animationDuration = 250; // In milliseconds\r\n\r\nconst _styles = {\r\n    container: RX.Styles.createButtonStyle({\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    }),\r\n    toggleSwitch: RX.Styles.createViewStyle({\r\n        flexDirection: 'row',\r\n        borderRadius: 15,\r\n        marginVertical: 8,\r\n        height: 30,\r\n        width: 50,\r\n        backgroundColor: '#ddd'\r\n    }),\r\n    toggleSwitchBackground: RX.Styles.createViewStyle({\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        borderRadius: 15\r\n    }),\r\n    toggleKnob: RX.Styles.createViewStyle({\r\n        top: 2,\r\n        height: 26,\r\n        width: 26,\r\n        borderRadius: 13,\r\n        backgroundColor: 'white'\r\n    })\r\n};\r\n\r\nclass ToggleSwitch extends RX.Component<ToggleSwitchProps, null> {\r\n    private _knobLeftAnimationValue: RX.Animated.Value;\r\n    private _knobLeftAnimationStyle: RX.Types.AnimatedViewStyleRuleSet;\r\n\r\n    private _toggleColorAnimationValue: RX.Animated.Value;\r\n    private _toggleColorAnimationStyle: RX.Types.AnimatedViewStyleRuleSet;\r\n\r\n    constructor(props: ToggleSwitchProps) {\r\n        super(props);\r\n\r\n        // This value controls the left offset of the knob, which we will\r\n        // animate when the user toggles the control.\r\n        this._knobLeftAnimationValue = new RX.Animated.Value(this.props.value ? _knobLeftOn : _knobLeftOff);\r\n        this._knobLeftAnimationStyle = RX.Styles.createAnimatedViewStyle({\r\n            left: this._knobLeftAnimationValue\r\n        });\r\n\r\n        // This value controls the background color of the control. Here we make\r\n        // use of the interpolate method to smoothly transition between two colors.\r\n        this._toggleColorAnimationValue = new RX.Animated.Value(this.props.value ? 1 : 0);\r\n        this._toggleColorAnimationStyle = RX.Styles.createAnimatedTextInputStyle({\r\n            backgroundColor: this._toggleColorAnimationValue.interpolate({\r\n                inputRange: [0, 1],\r\n                outputRange: ['#66f', '#ddd']\r\n            })\r\n        });\r\n    }\r\n\r\n    componentWillUpdate(newProps: ToggleSwitchProps) {\r\n\r\n        // If the value of the toggle changes, animate the toggle sliding\r\n        // from one side to the other. In parallel, animate the opacity change.\r\n        if (this.props.value !== newProps.value) {\r\n            RX.Animated.parallel([\r\n                RX.Animated.timing(this._knobLeftAnimationValue, {\r\n                    toValue: newProps.value ? _knobLeftOn : _knobLeftOff,\r\n                    duration: _animationDuration,\r\n                    easing: RX.Animated.Easing.InOut()\r\n                }),\r\n                RX.Animated.timing(this._toggleColorAnimationValue, {\r\n                    toValue: newProps.value ? 1 : 0,\r\n                    duration: _animationDuration,\r\n                    easing: RX.Animated.Easing.InOut()\r\n                })\r\n            ])\r\n            .start();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const knobStyles = [_styles.toggleKnob, this._knobLeftAnimationStyle];\r\n        const backgroundStyle = [_styles.toggleSwitchBackground, this._toggleColorAnimationStyle];\r\n\r\n        return (\r\n            <RX.Button style={ _styles.container } onPress={ this._handleClick }>\r\n                <RX.View style={ _styles.toggleSwitch }>\r\n                    <RX.Animated.View style={ backgroundStyle }/>\r\n                    <RX.Animated.View style={ knobStyles }/>\r\n                </RX.View>\r\n             </RX.Button>\r\n        );\r\n    }\r\n\r\n    private _handleClick = (e: RX.Types.SyntheticEvent) => {\r\n        e.stopPropagation();\r\n\r\n        if (this.props.onChange) {\r\n            this.props.onChange(!this.props.value);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ToggleSwitch;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ToggleSwitch.tsx","import RX = require('reactxp');\r\nimport App = require('./App');\r\n\r\nRX.App.initialize(true, true);\r\nRX.UserInterface.setMainView(<App />);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx"],"sourceRoot":""}